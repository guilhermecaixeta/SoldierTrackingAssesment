// <auto-generated />
using System;
using Infra.SoldierTrackingAssesment;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace Infra.SoldierTrackingAssesment.Migrations
{
    [DbContext(typeof(SoldierTrackingAssesmentContext))]
    partial class SoldierTrackingAssesmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infra.SoldierTrackingAssesment.Models.BaseSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseSensor");

                    b.HasDiscriminator().HasValue("BaseSensor");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Infra.SoldierTrackingAssesment.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Infra.SoldierTrackingAssesment.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Point>("Coordinates")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<int?>("GeolocalizationSensorId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GeolocalizationSensorId");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("SensorId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Infra.SoldierTrackingAssesment.Models.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("Infra.SoldierTrackingAssesment.Models.Soldier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RankId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("RankId");

                    b.ToTable("Soldiers");
                });

            modelBuilder.Entity("Infra.SoldierTrackingAssesment.Models.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("Infra.SoldierTrackingAssesment.Models.TrainingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<int>("SoldierId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("SoldierId");

                    b.HasIndex("TrainingId");

                    b.HasIndex("SensorId", "SoldierId", "TrainingId");

                    b.ToTable("TrainingDatas");
                });

            modelBuilder.Entity("SoldierTraining", b =>
                {
                    b.Property<int>("SoldiersId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingsId")
                        .HasColumnType("int");

                    b.HasKey("SoldiersId", "TrainingsId");

                    b.HasIndex("TrainingsId");

                    b.ToTable("SoldierTraining");
                });

            modelBuilder.Entity("Infra.SoldierTrackingAssesment.Models.GeolocalizationSensor", b =>
                {
                    b.HasBaseType("Infra.SoldierTrackingAssesment.Models.BaseSensor");

                    b.HasDiscriminator().HasValue("GeolocalizationSensor");
                });

            modelBuilder.Entity("Infra.SoldierTrackingAssesment.Models.Location", b =>
                {
                    b.HasOne("Infra.SoldierTrackingAssesment.Models.GeolocalizationSensor", null)
                        .WithMany("Locations")
                        .HasForeignKey("GeolocalizationSensorId");

                    b.HasOne("Infra.SoldierTrackingAssesment.Models.GeolocalizationSensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Infra.SoldierTrackingAssesment.Models.Soldier", b =>
                {
                    b.HasOne("Infra.SoldierTrackingAssesment.Models.Country", "Country")
                        .WithMany("Soldiers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infra.SoldierTrackingAssesment.Models.Rank", "Rank")
                        .WithMany("Soldiers")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Infra.SoldierTrackingAssesment.Models.TrainingData", b =>
                {
                    b.HasOne("Infra.SoldierTrackingAssesment.Models.BaseSensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infra.SoldierTrackingAssesment.Models.Soldier", "Soldier")
                        .WithMany()
                        .HasForeignKey("SoldierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infra.SoldierTrackingAssesment.Models.Training", "Training")
                        .WithMany("Data")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");

                    b.Navigation("Soldier");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("SoldierTraining", b =>
                {
                    b.HasOne("Infra.SoldierTrackingAssesment.Models.Soldier", null)
                        .WithMany()
                        .HasForeignKey("SoldiersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infra.SoldierTrackingAssesment.Models.Training", null)
                        .WithMany()
                        .HasForeignKey("TrainingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infra.SoldierTrackingAssesment.Models.Country", b =>
                {
                    b.Navigation("Soldiers");
                });

            modelBuilder.Entity("Infra.SoldierTrackingAssesment.Models.Rank", b =>
                {
                    b.Navigation("Soldiers");
                });

            modelBuilder.Entity("Infra.SoldierTrackingAssesment.Models.Training", b =>
                {
                    b.Navigation("Data");
                });

            modelBuilder.Entity("Infra.SoldierTrackingAssesment.Models.GeolocalizationSensor", b =>
                {
                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
